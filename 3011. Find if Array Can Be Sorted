Intuition
Since we are allowed to swap adjacent elements if they have the same number of set bits, our goal is to leverage this rule to check if we can sort the entire array. This hints at using bitwise operations to count set bits and then applying a sort based on this criteria.

Approach
We first loop through each adjacent pair in the array to see if we can make swaps based on the condition that they have the same number of set bits.
For each pair that meets this condition (same number of set bits), we check if they are in the wrong order and swap them if necessary.
After performing all possible swaps, we verify if the array is fully sorted by iterating through the list once more to check for order.
If the array is sorted, return true; otherwise, return false.
Complexity
Time complexity:
O(n 
2
 )
Since we are using a nested loop to compare adjacent elements and perform swaps, the time complexity is quadratic.

Space complexity:
O(1)
We are not using any extra space except for a few variables to hold intermediate values.

Code:

class Solution {
public:
    bool canSortArray(vector<int>& nums) {
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums.size() - i - 1; j++) {
                int setCount = countSetBit(nums[j]);
                int setCount1 = countSetBit(nums[j + 1]);
                if (setCount == setCount1 && nums[j] > nums[j + 1]) {
                    swap(nums[j], nums[j + 1]);
                }
            }
        }
        return isSorted(nums);
    }

private:
    int countSetBit(int n) {
        int count = 0;
        while (n > 0) {
            count++;
            n = n & (n - 1);
        }
        return count;
    }

    bool isSorted(vector<int>& nums) {
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] > nums[i + 1])
                return false;
        }
        return true;
    }
};
